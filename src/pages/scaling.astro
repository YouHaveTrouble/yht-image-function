---
import Layout from "../layouts/Layout.astro";
---
<Layout title="YHT's Image Functions">
  <main>
    <h1>YHT's Image Scaling</h1>
    <p>
      Work in progress. Upload images to scale them by a factor of your choice.
    </p>

    <div class="upload">
      <div>
        <input type="file" multiple accept="image/*" id="file"/>
        <label class="button" for="file">Upload images</label>
      </div>
      <div class="input">
        <label for="scaleFactor">Scale factor:</label>
        <input type="number" id="scaleFactor" value="1" min="0"/>
      </div>
      <div>
        <button data-action class="button" disabled>Scale!</button>
        <button data-download-all class="button" disabled>Download all</button>
      </div>

      <ul class="imageList"></ul>
    </div>
  </main>
</Layout>

<script>
  const fileUpload = document.getElementById("file");
  const scaleFactor = document.getElementById("scaleFactor");
  const imageList = document.querySelector(".imageList");
  const goButton = document.querySelector("[data-action]");
  const downloadAllButton = document.querySelector("[data-download-all]");

  if (!(fileUpload instanceof HTMLInputElement)) {
    throw new Error("File input not found");
  }
  if (!(imageList instanceof HTMLUListElement)) {
    throw new Error("Image list not found");
  }
  if (!(goButton instanceof HTMLButtonElement)) {
    throw new Error("Go button not found");
  }
  if (!(downloadAllButton instanceof HTMLButtonElement)) {
    throw new Error("Download all button not found");
  }
  if (!(scaleFactor instanceof HTMLInputElement)) {
    throw new Error("Scale factor input not found");
  }

  fileUpload.addEventListener("change", async () => {
    imageList.innerHTML = "";
    goButton.disabled = true;
    downloadAllButton.disabled = true;

    const files = fileUpload.files;
    if (!files) return;

    for (const file of files) {
      const listItem = document.createElement("li");
      listItem.setAttribute("data-file", file.name);
      listItem.textContent = file.name;
      imageList.appendChild(listItem);
    }
    goButton.disabled = false;
  });

  goButton.addEventListener("click", async () => {
    const files = fileUpload.files;
    if (!files) return;

    const scale = parseFloat(scaleFactor.value);
    if (isNaN(scale) || scale <= 0) {
      alert("Invalid scale factor");
      return;
    }

    for (const file of files) {
      const url = await scaleImage(file, scale);
      const listItem = imageList.querySelector(`[data-file="${file.name}"]`);
      if (!listItem) continue;
      const link = document.createElement("a");
      link.textContent = listItem.getAttribute("data-file");
      link.href = url;
      link.download = link.textContent + `_scaled_${scale}x.png`;
      link.style.color = "white";
      listItem.textContent = "";
      listItem.appendChild(link);
    }
    downloadAllButton.disabled = false;
  });

  downloadAllButton.addEventListener("click", async () => {
    const links = imageList.querySelectorAll("a");
    for (const link of links) {
      if (!(link instanceof HTMLAnchorElement)) continue;
      link.click();
    }
  });

  /**
   * Scale an image file and return a URL to the scaled image blob
   * @param file The image file to scale
   * @param scale The scale factor to apply
   * @returns A URL to the scaled image
   */
  function scaleImage(
    file: File,
    scale: number = 1,
  ): Promise<string> {
    return new Promise<string>(async (resolve, reject) => {

      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      if (ctx === null) {
        return reject(new Error("Could not get 2D context"));
      }
      const img = new Image();

      const loadingPromise = new Promise<void>((resolve) => {
        img.onload = () => {
          canvas.width = img.width * scale;
          canvas.height = img.height * scale;
          ctx.scale(scale, scale);
          ctx.drawImage(img, 0, 0);
          resolve();
        };
        img.src = URL.createObjectURL(file);
      });

      // wait for image to load and turn into blob
      await loadingPromise;
      canvas.toBlob((blob) => {
        if (!blob) {
          reject(new Error("Could not get blob"));
          URL.revokeObjectURL(img.src);
          return;
        }
        const url = URL.createObjectURL(blob);
        resolve(url);
        URL.revokeObjectURL(img.src);
      });

    });
  }

</script>

<style lang="scss">

  .upload {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  input[type="file"] {
    display: none;
  }

  .input {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;

    input {
      width: 100%;
      max-width: 100px;
      padding: 0.25rem;
      font-size: 1.2rem;
      text-align: center;
    }
  }

  .button {
    background-color: #007bff;
    border-radius: 0.25rem;
    color: white;
    cursor: pointer;
    display: inline-block;
    font-size: 1rem;
    padding: 0.5rem 1rem;
    text-align: center;
    text-decoration: none;
    transition: background-color 0.3s;

    &:disabled {
      background-color: #6c757d;
      cursor: not-allowed;
    }
  }

  .imageList {
    display: flex;
    flex-direction: column;
    padding-block: 1rem;
    gap: 0.2rem;
  }

</style>
