---
import Layout from "../layouts/Layout.astro";

import {FileMimeType} from "../util/ImageExtenstion";
let supportedExtensions = new Set<string>();
for (const key in FileMimeType) {
  supportedExtensions.add("." + FileMimeType[key]);
}
supportedExtensions.add(".svg"); // svg is a special case
---
<Layout title="Scaling" description="Scale images by a factor">
  <h1>YHT's Image Scaling</h1>
  <p>
    Upload images to scale them by a factor of your choice.<br/>
    svg images will be flattened to png.
  </p>
  <div class="upload">
    <div>
      <input type="file" multiple accept={Array.from(supportedExtensions).join(",")} id="file"/>
      <label class="button" for="file">Upload images</label>
    </div>
    <div class="input">
      <label for="scaleFactor">Scale factor:</label>
      <input type="number" id="scaleFactor" value="1" min="0"/>
    </div>
    <div class="buttons">
      <button data-action class="button" disabled>Scale!</button>
      <button data-download-all class="button" disabled>Download all</button>
    </div>
    <ul class="imageList"></ul>
  </div>
</Layout>

<script>
  import {FileMimeType} from "../util/ImageExtenstion";

  const fileUpload = document.getElementById("file");
  const scaleFactor = document.getElementById("scaleFactor");
  const imageList = document.querySelector(".imageList");
  const goButton = document.querySelector("[data-action]");
  const downloadAllButton = document.querySelector("[data-download-all]");

  if (!(fileUpload instanceof HTMLInputElement)) {
    throw new Error("File input not found");
  }
  if (!(imageList instanceof HTMLUListElement)) {
    throw new Error("Image list not found");
  }
  if (!(goButton instanceof HTMLButtonElement)) {
    throw new Error("Go button not found");
  }
  if (!(downloadAllButton instanceof HTMLButtonElement)) {
    throw new Error("Download all button not found");
  }
  if (!(scaleFactor instanceof HTMLInputElement)) {
    throw new Error("Scale factor input not found");
  }

  fileUpload.addEventListener("change", async () => {
    imageList.innerHTML = "";
    goButton.disabled = true;
    downloadAllButton.disabled = true;

    const files = fileUpload.files;
    if (!files) return;

    for (const file of files) {
      const listItem = document.createElement("li");
      listItem.setAttribute("data-file", file.name);
      listItem.textContent = file.name;
      imageList.appendChild(listItem);
    }
    goButton.disabled = false;
  });

  goButton.addEventListener("click", async () => {
    const files = fileUpload.files;
    if (!files) return;

    const scale = parseFloat(scaleFactor.value);
    if (isNaN(scale) || scale <= 0) {
      alert("Invalid scale factor");
      return;
    }

    goButton.disabled = true;
    const futures = [];

    for (const file of files) {
      futures.push(new Promise<void>(async (resolve, reject) => {
        const fileExtension = FileMimeType[file.type];
        const url = await scaleImage(file, scale);
        const listItem = imageList.querySelector(`[data-file="${file.name}"]`);
        if (!listItem) {
          reject(new Error("Could not find list item"));
          return;
        }
        const link = document.createElement("a");
        link.textContent = listItem.getAttribute("data-file");
        link.href = url;
        link.download = link.textContent + `_scaled_${scale}x.${fileExtension}`;
        link.style.color = "white";
        listItem.textContent = "";
        listItem.appendChild(link);
        resolve();
      }));
    }

    await Promise.allSettled(futures);

    downloadAllButton.disabled = false;
  });

  downloadAllButton.addEventListener("click", async () => {
    const links = imageList.querySelectorAll("a");
    for (const link of links) {
      if (!(link instanceof HTMLAnchorElement)) continue;
      link.click();
    }
  });

  /**
   * Scale an image file and return a URL to the scaled image blob
   * @param file The image file to scale
   * @param scale The scale factor to apply
   * @returns A URL to the scaled image
   */
  function scaleImage(
    file: File,
    scale: number = 1,
  ): Promise<string> {
    return new Promise<string>(async (resolve, reject) => {

      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      if (ctx === null) {
        return reject(new Error("Could not get 2D context"));
      }
      const img = new Image();

      const loadingPromise = new Promise<void>((resolve) => {
        img.onload = () => {
          canvas.width = img.width * scale;
          canvas.height = img.height * scale;
          ctx.scale(scale, scale);
          ctx.drawImage(img, 0, 0);
          resolve();
        };
        img.src = URL.createObjectURL(file);
      });

      // wait for image to load and turn into blob
      await loadingPromise.catch((e) => {
        reject(new Error("Could not load image", e));
      });
      canvas.toBlob((blob) => {
        if (!blob) {
          reject(new Error("Could not get blob"));
          URL.revokeObjectURL(img.src);
          return;
        }
        const url = URL.createObjectURL(blob);
        resolve(url);
        URL.revokeObjectURL(img.src);
      }, file.type);
    });
  }

</script>

<style lang="scss">

  .upload {
    display: flex;
    flex-direction: column;
    gap: 1rem;

    input[type="file"] {
      display: none;
    }

    .input {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;

      input {
        width: 100%;
        max-width: 100px;
        padding: 0.25rem;
        font-size: 1.2rem;
        text-align: center;
      }
    }

    .imageList {
      display: flex;
      flex-direction: column;
      padding-block: 1rem;
      gap: 0.2rem;
    }

    .buttons {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      align-items: center;
      gap: 0.25rem;
    }
  }
</style>
